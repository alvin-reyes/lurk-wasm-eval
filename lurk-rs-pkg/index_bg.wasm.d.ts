/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function blst_fp12_mul(a: number, b: number, c: number): void;
export function blst_fr_add(a: number, b: number, c: number): void;
export function blst_fr_mul(a: number, b: number, c: number): void;
export function blst_fr_sub(a: number, b: number, c: number): void;
export function blst_fr_cneg(a: number, b: number, c: number): void;
export function blst_p1_add_or_double_affine(a: number, b: number, c: number): void;
export function blst_p1_add_or_double(a: number, b: number, c: number): void;
export function blst_p1_affine_is_equal(a: number, b: number): number;
export function blst_p1_cneg(a: number, b: number): void;
export function blst_encode_to_g1(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function blst_encode_to_g2(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function blst_p2_add_or_double_affine(a: number, b: number, c: number): void;
export function blst_p2_add_or_double(a: number, b: number, c: number): void;
export function blst_p2_affine_is_equal(a: number, b: number): number;
export function blst_p2_cneg(a: number, b: number): void;
export function run_lurk(a: number, b: number): void;
export function blst_scalar_from_fr(a: number, b: number): void;
export function blst_fr_eucl_inverse(a: number, b: number): void;
export function blst_fr_from_uint64(a: number, b: number): void;
export function blst_scalar_fr_check(a: number): number;
export function blst_uint64_from_fr(a: number, b: number): void;
export function blst_scalar_from_uint64(a: number, b: number): void;
export function blst_fr_from_scalar(a: number, b: number): void;
export function blst_fr_mul_by_3(a: number, b: number): void;
export function blst_fr_lshift(a: number, b: number, c: number): void;
export function blst_fr_rshift(a: number, b: number, c: number): void;
export function blst_fr_sqr(a: number, b: number): void;
export function blst_fp2_add(a: number, b: number, c: number): void;
export function blst_fp12_sqr(a: number, b: number): void;
export function blst_fp12_inverse(a: number, b: number): void;
export function blst_fp12_frobenius_map(a: number, b: number, c: number): void;
export function blst_fp2_mul(a: number, b: number, c: number): void;
export function blst_fp12_conjugate(a: number): void;
export function blst_miller_loop_lines(a: number, b: number, c: number): void;
export function blst_fp_add(a: number, b: number, c: number): void;
export function blst_fp_sub(a: number, b: number, c: number): void;
export function blst_fp_mul(a: number, b: number, c: number): void;
export function blst_fp_sqr(a: number, b: number): void;
export function blst_fp_eucl_inverse(a: number, b: number): void;
export function blst_fp_sqrt(a: number, b: number): number;
export function blst_fp_from_lendian(a: number, b: number): void;
export function blst_lendian_from_fp(a: number, b: number): void;
export function blst_fp_mul_by_3(a: number, b: number): void;
export function blst_fp_mul_by_8(a: number, b: number): void;
export function blst_fp_lshift(a: number, b: number, c: number): void;
export function blst_fp_from_uint64(a: number, b: number): void;
export function blst_fp12_in_group(a: number): number;
export function blst_p2_to_affine(a: number, b: number): void;
export function blst_p2_affine_generator(): number;
export function blst_p2_affine_is_inf(a: number): number;
export function blst_p2_affine_compress(a: number, b: number): void;
export function blst_p2_affine_serialize(a: number, b: number): void;
export function blst_p2_deserialize(a: number, b: number): number;
export function blst_p2_uncompress(a: number, b: number): number;
export function blst_p2_affine_in_g2(a: number): number;
export function blst_p2_affine_on_curve(a: number): number;
export function blst_p2_from_affine(a: number, b: number): void;
export function blst_p2_compress(a: number, b: number): void;
export function blst_p2_serialize(a: number, b: number): void;
export function blst_p2_on_curve(a: number): number;
export function blst_p2_mult(a: number, b: number, c: number, d: number): void;
export function blst_hash_to_g2(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function blst_p2_generator(): number;
export function blst_p2_is_inf(a: number): number;
export function blst_p2_double(a: number, b: number): void;
export function blst_precompute_lines(a: number, b: number): void;
export function blst_miller_loop(a: number, b: number, c: number): void;
export function blst_final_exp(a: number, b: number): void;
export function blst_uniq_sizeof(a: number): number;
export function blst_uniq_init(a: number): void;
export function blst_uniq_test(a: number, b: number, c: number): number;
export function blst_pairing_sizeof(): number;
export function blst_pairing_init(a: number, b: number, c: number, d: number): void;
export function blst_pairing_aggregate_pk_in_g1(a: number, b: number, c: number, d: number, e: number, f: number, g: number): number;
export function blst_aggregated_in_g2(a: number, b: number): void;
export function blst_pairing_commit(a: number): void;
export function blst_pairing_merge(a: number, b: number): number;
export function blst_pairing_finalverify(a: number, b: number): number;
export function blst_pairing_aggregate_pk_in_g2(a: number, b: number, c: number, d: number, e: number, f: number, g: number): number;
export function blst_aggregated_in_g1(a: number, b: number): void;
export function blst_p1_to_affine(a: number, b: number): void;
export function blst_p1_affine_compress(a: number, b: number): void;
export function blst_p1_affine_serialize(a: number, b: number): void;
export function blst_p1_deserialize(a: number, b: number): number;
export function blst_p1_uncompress(a: number, b: number): number;
export function blst_p1_affine_in_g1(a: number): number;
export function blst_p1_affine_on_curve(a: number): number;
export function blst_p1_from_affine(a: number, b: number): void;
export function blst_p1_compress(a: number, b: number): void;
export function blst_p1_serialize(a: number, b: number): void;
export function blst_p1_on_curve(a: number): number;
export function blst_p1_mult(a: number, b: number, c: number, d: number): void;
export function blst_hash_to_g1(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function blst_p1_generator(): number;
export function blst_p1_is_inf(a: number): number;
export function blst_p1_double(a: number, b: number): void;
export function blst_p1_affine_generator(): number;
export function blst_p1_affine_is_inf(a: number): number;
export function blst_fp2_cneg(a: number, b: number, c: number): void;
export function blst_fp2_sub(a: number, b: number, c: number): void;
export function blst_fp2_mul_by_3(a: number, b: number): void;
export function blst_fp2_mul_by_8(a: number, b: number): void;
export function blst_fp2_lshift(a: number, b: number, c: number): void;
export function blst_fp2_sqr(a: number, b: number): void;
export function blst_fp2_eucl_inverse(a: number, b: number): void;
export function blst_fp2_sqrt(a: number, b: number): number;
export function blst_keygen(a: number, b: number, c: number, d: number, e: number): void;
export function blst_sk_to_pk2_in_g1(a: number, b: number, c: number): void;
export function blst_sign_pk2_in_g1(a: number, b: number, c: number, d: number): void;
export function blst_bendian_from_scalar(a: number, b: number): void;
export function blst_scalar_from_bendian(a: number, b: number): void;
export function blst_sk_check(a: number): number;
export function blst_p2_in_g2(a: number): number;
export function blst_sk_to_pk2_in_g2(a: number, b: number, c: number): void;
export function blst_sign_pk2_in_g2(a: number, b: number, c: number, d: number): void;
export function blst_p1_in_g1(a: number): number;
export function blst_p1_is_equal(a: number, b: number): number;
export function blst_p2_is_equal(a: number, b: number): number;
export function blst_fp12_one(): number;
export function blst_fp12_is_equal(a: number, b: number): number;
export function blst_fp12_finalverify(a: number, b: number): number;
export function blst_expand_message_xmd(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function blst_scalar_from_be_bytes(a: number, b: number, c: number): number;
export function blst_pairing_chk_n_aggr_pk_in_g1(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): number;
export function blst_pairing_chk_n_aggr_pk_in_g2(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): number;
export function blst_pairing_chk_n_mul_n_aggr_pk_in_g1(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number): number;
export function blst_pairing_chk_n_mul_n_aggr_pk_in_g2(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number): number;
export function blst_pairing_raw_aggregate(a: number, b: number, c: number): void;
export function blst_pairing_as_fp12(a: number): number;
export function blst_p1s_to_affine(a: number, b: number, c: number): void;
export function blst_p1s_mult_pippenger_scratch_sizeof(a: number): number;
export function blst_p1s_mult_pippenger(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function blst_p1s_tile_pippenger(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function blst_p2s_to_affine(a: number, b: number, c: number): void;
export function blst_p2s_mult_pippenger_scratch_sizeof(a: number): number;
export function blst_p2s_mult_pippenger(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function blst_p2s_tile_pippenger(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function redc_mont_256(a: number, b: number, c: number, d: number): void;
export function mul_mont_sparse_256(a: number, b: number, c: number, d: number, e: number): void;
export function blst_sha256_bcopy(a: number, b: number, c: number): void;
export function blst_sha256_block_data_order(a: number, b: number, c: number): void;
export function blst_sha256_emit(a: number, b: number): void;
export function blst_sha256_hcopy(a: number, b: number): void;
export function blst_p1_from_jacobian(a: number, b: number): void;
export function sgn0_pty_mod_384(a: number, b: number): number;
export function sgn0_pty_mont_384(a: number, b: number, c: number): number;
export function blst_p1_add(a: number, b: number, c: number): void;
export function blst_p1_add_affine(a: number, b: number, c: number): void;
export function blst_sk_to_pk_in_g1(a: number, b: number): void;
export function blst_sign_pk_in_g2(a: number, b: number, c: number): void;
export function check_mod_256(a: number, b: number): number;
export function blst_p1_unchecked_mult(a: number, b: number, c: number, d: number): void;
export function blst_map_to_g1(a: number, b: number, c: number): void;
export function blst_p2_from_jacobian(a: number, b: number): void;
export function sgn0_pty_mod_384x(a: number, b: number): number;
export function sgn0_pty_mont_384x(a: number, b: number, c: number): number;
export function blst_p2_add(a: number, b: number, c: number): void;
export function blst_p2_add_affine(a: number, b: number, c: number): void;
export function blst_sk_to_pk_in_g2(a: number, b: number): void;
export function blst_sign_pk_in_g1(a: number, b: number, c: number): void;
export function blst_p2_unchecked_mult(a: number, b: number, c: number, d: number): void;
export function blst_map_to_g2(a: number, b: number, c: number): void;
export function blst_fp12_cyclotomic_sqr(a: number, b: number): void;
export function blst_fp12_mul_by_xy00z0(a: number, b: number, c: number): void;
export function blst_fp12_is_one(a: number): number;
export function blst_pairing_get_dst(a: number): number;
export function blst_pairing_mul_n_aggregate_pk_in_g2(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): number;
export function blst_pairing_mul_n_aggregate_pk_in_g1(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): number;
export function blst_aggregate_in_g1(a: number, b: number, c: number): number;
export function blst_aggregate_in_g2(a: number, b: number, c: number): number;
export function blst_core_verify_pk_in_g1(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): number;
export function blst_core_verify_pk_in_g2(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): number;
export function blst_fp_is_square(a: number): number;
export function ct_is_square_mod_384(a: number, b: number): number;
export function blst_fp2_is_square(a: number): number;
export function sqr_mont_384(a: number, b: number, c: number, d: number): void;
export function add_mod_384(a: number, b: number, c: number, d: number): void;
export function blst_fp_inverse(a: number, b: number): void;
export function ct_inverse_mod_384(a: number, b: number, c: number, d: number): void;
export function redc_mont_384(a: number, b: number, c: number, d: number): void;
export function mul_mont_384(a: number, b: number, c: number, d: number, e: number): void;
export function blst_fp2_inverse(a: number, b: number): void;
export function blst_fr_inverse(a: number, b: number): void;
export function ct_inverse_mod_256(a: number, b: number, c: number, d: number): void;
export function blst_p1s_add(a: number, b: number, c: number): void;
export function blst_p2s_add(a: number, b: number, c: number): void;
export function blst_p1s_mult_wbits_precompute_sizeof(a: number, b: number): number;
export function blst_p1s_mult_wbits_precompute(a: number, b: number, c: number, d: number): void;
export function blst_p1s_mult_wbits_scratch_sizeof(a: number): number;
export function blst_p1s_mult_wbits(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function blst_p2s_mult_wbits_precompute_sizeof(a: number, b: number): number;
export function blst_p2s_mult_wbits_precompute(a: number, b: number, c: number, d: number): void;
export function blst_p2s_mult_wbits_scratch_sizeof(a: number): number;
export function blst_p2s_mult_wbits(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function sqr_mont_sparse_256(a: number, b: number, c: number, d: number): void;
export function add_mod_256(a: number, b: number, c: number, d: number): void;
export function sub_mod_256(a: number, b: number, c: number, d: number): void;
export function sub_mod_384(a: number, b: number, c: number, d: number): void;
export function mul_by_3_mod_256(a: number, b: number, c: number): void;
export function mul_by_3_mod_384(a: number, b: number, c: number): void;
export function lshift_mod_256(a: number, b: number, c: number, d: number): void;
export function lshift_mod_384(a: number, b: number, c: number, d: number): void;
export function cneg_mod_256(a: number, b: number, c: number, d: number): void;
export function cneg_mod_384(a: number, b: number, c: number, d: number): void;
export function add_n_check_mod_256(a: number, b: number, c: number, d: number): number;
export function sub_n_check_mod_256(a: number, b: number, c: number, d: number): number;
export function from_mont_256(a: number, b: number, c: number, d: number): void;
export function from_mont_384(a: number, b: number, c: number, d: number): void;
export function rshift_mod_256(a: number, b: number, c: number, d: number): void;
export function rshift_mod_384(a: number, b: number, c: number, d: number): void;
export function div_by_2_mod_384(a: number, b: number, c: number): void;
export function mul_mont_384x(a: number, b: number, c: number, d: number, e: number): void;
export function sqr_n_mul_mont_383(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function sqr_mont_382x(a: number, b: number, c: number, d: number): void;
export function div_3_limbs(a: number, b: number, c: number): number;
export function vec_prefetch(a: number, b: number): void;
export function mul_by_8_mod_384(a: number, b: number, c: number): void;
export function mul_by_3_mod_384x(a: number, b: number, c: number): void;
export function mul_by_8_mod_384x(a: number, b: number, c: number): void;
export function mul_by_1_plus_i_mod_384x(a: number, b: number, c: number): void;
export function add_mod_384x(a: number, b: number, c: number, d: number): void;
export function sub_mod_384x(a: number, b: number, c: number, d: number): void;
export function sqr_mont_384x(a: number, b: number, c: number, d: number): void;
export function quot_rem_128(a: number, b: number, c: number): number;
export function quot_rem_64(a: number, b: number, c: number): number;
export function blst_fr_to(a: number, b: number): void;
export function blst_fr_from(a: number, b: number): void;
export function blst_sk_add_n_check(a: number, b: number, c: number): number;
export function blst_sk_sub_n_check(a: number, b: number, c: number): number;
export function blst_sk_mul_n_check(a: number, b: number, c: number): number;
export function blst_sk_inverse(a: number, b: number): void;
export function blst_fp_cneg(a: number, b: number, c: number): void;
export function blst_fp_to(a: number, b: number): void;
export function blst_fp_from(a: number, b: number): void;
export function blst_fp_from_uint32(a: number, b: number): void;
export function blst_uint32_from_fp(a: number, b: number): void;
export function blst_uint64_from_fp(a: number, b: number): void;
export function blst_fp_from_bendian(a: number, b: number): void;
export function blst_bendian_from_fp(a: number, b: number): void;
export function blst_scalar_from_uint32(a: number, b: number): void;
export function blst_uint32_from_scalar(a: number, b: number): void;
export function blst_uint64_from_scalar(a: number, b: number): void;
export function blst_scalar_from_lendian(a: number, b: number): void;
export function blst_lendian_from_scalar(a: number, b: number): void;
export function blst_scalar_from_le_bytes(a: number, b: number, c: number): number;
export function blst_scalar_from_hexascii(a: number, b: number): void;
export function blst_fp_from_hexascii(a: number, b: number): void;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
export function __wbindgen_add_to_stack_pointer(a: number): number;
